//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2019.11.13 at 11:46:37 AM CST 
//


package com.mentor.capital.project;

import java.util.ArrayList;
import java.util.List;
import javax.xml.bind.annotation.XmlAccessType;
import javax.xml.bind.annotation.XmlAccessorType;
import javax.xml.bind.annotation.XmlAttribute;
import javax.xml.bind.annotation.XmlElement;
import javax.xml.bind.annotation.XmlElements;
import javax.xml.bind.annotation.XmlIDREF;
import javax.xml.bind.annotation.XmlRootElement;
import javax.xml.bind.annotation.XmlType;


/**
 * 
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(name = "", propOrder = {
    "diagramsettings",
    "balloonthickness",
    "decimalformatting",
    "datadictionary",
    "grid",
    "opacityconfiguration",
    "border",
    "multicorebinding",
    "logicwiretabledataOrLogicdevicetabledataOrLogicconnectortabledataOrLogicassemblytabledataOrLogicrevisiontabledataOrLogicmulticoretabledataOrLogicoverbraidtabledataOrLogicbomtabledataOrLogicdiagramtabledataOrDynamictabledataOrPlugintabledataOrTableOrTablegroupOrPropertiedgraphicOrAttributetextOrProptextOrDiagramtextOrCompositetextOrSchemchainOrSchemconnectorOrSchemdeviceOrSchemdeviceconnectorOrSchemgrounddeviceOrSchemindicatorOrScheminterconnectOrSchemnetOrSchemshieldOrSchemspliceOrSchemwireOrSchemhighwayOrSchemfunccondOrSchemnodeOrSchemassemblyOrArcOrCircleOrCommentOrCurveOrImageOrGfxgroupOrLineOrPolygonOrPolylineOrPropertiedtextOrRectangleOrWidtharcOrStyleframeOrUnconstrainedstyleframeOrPrintregiongroup"
})
@XmlRootElement(name = "diagramcontent")
public class Diagramcontent {

    @XmlAttribute(name = "diagramid", required = true)
    @XmlIDREF
    protected Object diagramid;
    protected Diagramsettings diagramsettings;
    protected Balloonthickness balloonthickness;
    protected Decimalformatting decimalformatting;
    @XmlElement(required = true)
    protected Datadictionary datadictionary;
    protected Grid grid;
    protected Opacityconfiguration opacityconfiguration;
    protected Border border;
    protected List<Multicorebinding> multicorebinding;
    @XmlElements({
        @XmlElement(name = "logicwiretabledata", type = Logicwiretabledata.class),
        @XmlElement(name = "logicdevicetabledata", type = Logicdevicetabledata.class),
        @XmlElement(name = "logicconnectortabledata", type = Logicconnectortabledata.class),
        @XmlElement(name = "logicassemblytabledata", type = Logicassemblytabledata.class),
        @XmlElement(name = "logicrevisiontabledata", type = Logicrevisiontabledata.class),
        @XmlElement(name = "logicmulticoretabledata", type = Logicmulticoretabledata.class),
        @XmlElement(name = "logicoverbraidtabledata", type = Logicoverbraidtabledata.class),
        @XmlElement(name = "logicbomtabledata", type = Logicbomtabledata.class),
        @XmlElement(name = "logicdiagramtabledata", type = Logicdiagramtabledata.class),
        @XmlElement(name = "dynamictabledata", type = Dynamictabledata.class),
        @XmlElement(name = "plugintabledata", type = Plugintabledata.class),
        @XmlElement(name = "table", type = Table.class),
        @XmlElement(name = "tablegroup", type = Tablegroup.class),
        @XmlElement(name = "propertiedgraphic", type = Propertiedgraphic.class),
        @XmlElement(name = "attributetext", type = Attributetext.class),
        @XmlElement(name = "proptext", type = Proptext.class),
        @XmlElement(name = "diagramtext", type = Diagramtext.class),
        @XmlElement(name = "compositetext", type = Compositetext.class),
        @XmlElement(name = "schemchain", type = Schemchain.class),
        @XmlElement(name = "schemconnector", type = Schemconnector.class),
        @XmlElement(name = "schemdevice", type = Schemdevice.class),
        @XmlElement(name = "schemdeviceconnector", type = Schemdeviceconnector.class),
        @XmlElement(name = "schemgrounddevice", type = Schemgrounddevice.class),
        @XmlElement(name = "schemindicator", type = Schemindicator.class),
        @XmlElement(name = "scheminterconnect", type = Scheminterconnect.class),
        @XmlElement(name = "schemnet", type = Schemnet.class),
        @XmlElement(name = "schemshield", type = Schemshield.class),
        @XmlElement(name = "schemsplice", type = Schemsplice.class),
        @XmlElement(name = "schemwire", type = Schemwire.class),
        @XmlElement(name = "schemhighway", type = Schemhighway.class),
        @XmlElement(name = "schemfunccond", type = Schemfunccond.class),
        @XmlElement(name = "schemnode", type = Schemnode.class),
        @XmlElement(name = "schemassembly", type = Schemassembly.class),
        @XmlElement(name = "arc", type = Arc.class),
        @XmlElement(name = "circle", type = Circle.class),
        @XmlElement(name = "comment", type = Comment.class),
        @XmlElement(name = "curve", type = Curve.class),
        @XmlElement(name = "image", type = Image.class),
        @XmlElement(name = "gfxgroup", type = Gfxgroup.class),
        @XmlElement(name = "line", type = Line.class),
        @XmlElement(name = "polygon", type = Polygon.class),
        @XmlElement(name = "polyline", type = Polyline.class),
        @XmlElement(name = "propertiedtext", type = Propertiedtext.class),
        @XmlElement(name = "rectangle", type = Rectangle.class),
        @XmlElement(name = "widtharc", type = Widtharc.class),
        @XmlElement(name = "styleframe", type = Styleframe.class),
        @XmlElement(name = "unconstrainedstyleframe", type = Unconstrainedstyleframe.class),
        @XmlElement(name = "printregiongroup", type = Printregiongroup.class)
    })
    protected List<Object> logicwiretabledataOrLogicdevicetabledataOrLogicconnectortabledataOrLogicassemblytabledataOrLogicrevisiontabledataOrLogicmulticoretabledataOrLogicoverbraidtabledataOrLogicbomtabledataOrLogicdiagramtabledataOrDynamictabledataOrPlugintabledataOrTableOrTablegroupOrPropertiedgraphicOrAttributetextOrProptextOrDiagramtextOrCompositetextOrSchemchainOrSchemconnectorOrSchemdeviceOrSchemdeviceconnectorOrSchemgrounddeviceOrSchemindicatorOrScheminterconnectOrSchemnetOrSchemshieldOrSchemspliceOrSchemwireOrSchemhighwayOrSchemfunccondOrSchemnodeOrSchemassemblyOrArcOrCircleOrCommentOrCurveOrImageOrGfxgroupOrLineOrPolygonOrPolylineOrPropertiedtextOrRectangleOrWidtharcOrStyleframeOrUnconstrainedstyleframeOrPrintregiongroup;

    /**
     * Gets the value of the diagramid property.
     * 
     * @return
     *     possible object is
     *     {@link Object }
     *     
     */
    public Object getDiagramid() {
        return diagramid;
    }

    /**
     * Sets the value of the diagramid property.
     * 
     * @param value
     *     allowed object is
     *     {@link Object }
     *     
     */
    public void setDiagramid(Object value) {
        this.diagramid = value;
    }

    /**
     * Gets the value of the diagramsettings property.
     * 
     * @return
     *     possible object is
     *     {@link Diagramsettings }
     *     
     */
    public Diagramsettings getDiagramsettings() {
        return diagramsettings;
    }

    /**
     * Sets the value of the diagramsettings property.
     * 
     * @param value
     *     allowed object is
     *     {@link Diagramsettings }
     *     
     */
    public void setDiagramsettings(Diagramsettings value) {
        this.diagramsettings = value;
    }

    /**
     * Gets the value of the balloonthickness property.
     * 
     * @return
     *     possible object is
     *     {@link Balloonthickness }
     *     
     */
    public Balloonthickness getBalloonthickness() {
        return balloonthickness;
    }

    /**
     * Sets the value of the balloonthickness property.
     * 
     * @param value
     *     allowed object is
     *     {@link Balloonthickness }
     *     
     */
    public void setBalloonthickness(Balloonthickness value) {
        this.balloonthickness = value;
    }

    /**
     * Gets the value of the decimalformatting property.
     * 
     * @return
     *     possible object is
     *     {@link Decimalformatting }
     *     
     */
    public Decimalformatting getDecimalformatting() {
        return decimalformatting;
    }

    /**
     * Sets the value of the decimalformatting property.
     * 
     * @param value
     *     allowed object is
     *     {@link Decimalformatting }
     *     
     */
    public void setDecimalformatting(Decimalformatting value) {
        this.decimalformatting = value;
    }

    /**
     * Gets the value of the datadictionary property.
     * 
     * @return
     *     possible object is
     *     {@link Datadictionary }
     *     
     */
    public Datadictionary getDatadictionary() {
        return datadictionary;
    }

    /**
     * Sets the value of the datadictionary property.
     * 
     * @param value
     *     allowed object is
     *     {@link Datadictionary }
     *     
     */
    public void setDatadictionary(Datadictionary value) {
        this.datadictionary = value;
    }

    /**
     * Gets the value of the grid property.
     * 
     * @return
     *     possible object is
     *     {@link Grid }
     *     
     */
    public Grid getGrid() {
        return grid;
    }

    /**
     * Sets the value of the grid property.
     * 
     * @param value
     *     allowed object is
     *     {@link Grid }
     *     
     */
    public void setGrid(Grid value) {
        this.grid = value;
    }

    /**
     * Gets the value of the opacityconfiguration property.
     * 
     * @return
     *     possible object is
     *     {@link Opacityconfiguration }
     *     
     */
    public Opacityconfiguration getOpacityconfiguration() {
        return opacityconfiguration;
    }

    /**
     * Sets the value of the opacityconfiguration property.
     * 
     * @param value
     *     allowed object is
     *     {@link Opacityconfiguration }
     *     
     */
    public void setOpacityconfiguration(Opacityconfiguration value) {
        this.opacityconfiguration = value;
    }

    /**
     * Gets the value of the border property.
     * 
     * @return
     *     possible object is
     *     {@link Border }
     *     
     */
    public Border getBorder() {
        return border;
    }

    /**
     * Sets the value of the border property.
     * 
     * @param value
     *     allowed object is
     *     {@link Border }
     *     
     */
    public void setBorder(Border value) {
        this.border = value;
    }

    /**
     * Gets the value of the multicorebinding property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the multicorebinding property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getMulticorebinding().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Multicorebinding }
     * 
     * 
     */
    public List<Multicorebinding> getMulticorebinding() {
        if (multicorebinding == null) {
            multicorebinding = new ArrayList<Multicorebinding>();
        }
        return this.multicorebinding;
    }

    /**
     * Gets the value of the logicwiretabledataOrLogicdevicetabledataOrLogicconnectortabledataOrLogicassemblytabledataOrLogicrevisiontabledataOrLogicmulticoretabledataOrLogicoverbraidtabledataOrLogicbomtabledataOrLogicdiagramtabledataOrDynamictabledataOrPlugintabledataOrTableOrTablegroupOrPropertiedgraphicOrAttributetextOrProptextOrDiagramtextOrCompositetextOrSchemchainOrSchemconnectorOrSchemdeviceOrSchemdeviceconnectorOrSchemgrounddeviceOrSchemindicatorOrScheminterconnectOrSchemnetOrSchemshieldOrSchemspliceOrSchemwireOrSchemhighwayOrSchemfunccondOrSchemnodeOrSchemassemblyOrArcOrCircleOrCommentOrCurveOrImageOrGfxgroupOrLineOrPolygonOrPolylineOrPropertiedtextOrRectangleOrWidtharcOrStyleframeOrUnconstrainedstyleframeOrPrintregiongroup property.
     * 
     * <p>
     * This accessor method returns a reference to the live list,
     * not a snapshot. Therefore any modification you make to the
     * returned list will be present inside the JAXB object.
     * This is why there is not a <CODE>set</CODE> method for the logicwiretabledataOrLogicdevicetabledataOrLogicconnectortabledataOrLogicassemblytabledataOrLogicrevisiontabledataOrLogicmulticoretabledataOrLogicoverbraidtabledataOrLogicbomtabledataOrLogicdiagramtabledataOrDynamictabledataOrPlugintabledataOrTableOrTablegroupOrPropertiedgraphicOrAttributetextOrProptextOrDiagramtextOrCompositetextOrSchemchainOrSchemconnectorOrSchemdeviceOrSchemdeviceconnectorOrSchemgrounddeviceOrSchemindicatorOrScheminterconnectOrSchemnetOrSchemshieldOrSchemspliceOrSchemwireOrSchemhighwayOrSchemfunccondOrSchemnodeOrSchemassemblyOrArcOrCircleOrCommentOrCurveOrImageOrGfxgroupOrLineOrPolygonOrPolylineOrPropertiedtextOrRectangleOrWidtharcOrStyleframeOrUnconstrainedstyleframeOrPrintregiongroup property.
     * 
     * <p>
     * For example, to add a new item, do as follows:
     * <pre>
     *    getLogicwiretabledataOrLogicdevicetabledataOrLogicconnectortabledataOrLogicassemblytabledataOrLogicrevisiontabledataOrLogicmulticoretabledataOrLogicoverbraidtabledataOrLogicbomtabledataOrLogicdiagramtabledataOrDynamictabledataOrPlugintabledataOrTableOrTablegroupOrPropertiedgraphicOrAttributetextOrProptextOrDiagramtextOrCompositetextOrSchemchainOrSchemconnectorOrSchemdeviceOrSchemdeviceconnectorOrSchemgrounddeviceOrSchemindicatorOrScheminterconnectOrSchemnetOrSchemshieldOrSchemspliceOrSchemwireOrSchemhighwayOrSchemfunccondOrSchemnodeOrSchemassemblyOrArcOrCircleOrCommentOrCurveOrImageOrGfxgroupOrLineOrPolygonOrPolylineOrPropertiedtextOrRectangleOrWidtharcOrStyleframeOrUnconstrainedstyleframeOrPrintregiongroup().add(newItem);
     * </pre>
     * 
     * 
     * <p>
     * Objects of the following type(s) are allowed in the list
     * {@link Logicwiretabledata }
     * {@link Logicdevicetabledata }
     * {@link Logicconnectortabledata }
     * {@link Logicassemblytabledata }
     * {@link Logicrevisiontabledata }
     * {@link Logicmulticoretabledata }
     * {@link Logicoverbraidtabledata }
     * {@link Logicbomtabledata }
     * {@link Logicdiagramtabledata }
     * {@link Dynamictabledata }
     * {@link Plugintabledata }
     * {@link Table }
     * {@link Tablegroup }
     * {@link Propertiedgraphic }
     * {@link Attributetext }
     * {@link Proptext }
     * {@link Diagramtext }
     * {@link Compositetext }
     * {@link Schemchain }
     * {@link Schemconnector }
     * {@link Schemdevice }
     * {@link Schemdeviceconnector }
     * {@link Schemgrounddevice }
     * {@link Schemindicator }
     * {@link Scheminterconnect }
     * {@link Schemnet }
     * {@link Schemshield }
     * {@link Schemsplice }
     * {@link Schemwire }
     * {@link Schemhighway }
     * {@link Schemfunccond }
     * {@link Schemnode }
     * {@link Schemassembly }
     * {@link Arc }
     * {@link Circle }
     * {@link Comment }
     * {@link Curve }
     * {@link Image }
     * {@link Gfxgroup }
     * {@link Line }
     * {@link Polygon }
     * {@link Polyline }
     * {@link Propertiedtext }
     * {@link Rectangle }
     * {@link Widtharc }
     * {@link Styleframe }
     * {@link Unconstrainedstyleframe }
     * {@link Printregiongroup }
     * 
     * 
     */
    public List<Object> getLogicwiretabledataOrLogicdevicetabledataOrLogicconnectortabledataOrLogicassemblytabledataOrLogicrevisiontabledataOrLogicmulticoretabledataOrLogicoverbraidtabledataOrLogicbomtabledataOrLogicdiagramtabledataOrDynamictabledataOrPlugintabledataOrTableOrTablegroupOrPropertiedgraphicOrAttributetextOrProptextOrDiagramtextOrCompositetextOrSchemchainOrSchemconnectorOrSchemdeviceOrSchemdeviceconnectorOrSchemgrounddeviceOrSchemindicatorOrScheminterconnectOrSchemnetOrSchemshieldOrSchemspliceOrSchemwireOrSchemhighwayOrSchemfunccondOrSchemnodeOrSchemassemblyOrArcOrCircleOrCommentOrCurveOrImageOrGfxgroupOrLineOrPolygonOrPolylineOrPropertiedtextOrRectangleOrWidtharcOrStyleframeOrUnconstrainedstyleframeOrPrintregiongroup() {
        if (logicwiretabledataOrLogicdevicetabledataOrLogicconnectortabledataOrLogicassemblytabledataOrLogicrevisiontabledataOrLogicmulticoretabledataOrLogicoverbraidtabledataOrLogicbomtabledataOrLogicdiagramtabledataOrDynamictabledataOrPlugintabledataOrTableOrTablegroupOrPropertiedgraphicOrAttributetextOrProptextOrDiagramtextOrCompositetextOrSchemchainOrSchemconnectorOrSchemdeviceOrSchemdeviceconnectorOrSchemgrounddeviceOrSchemindicatorOrScheminterconnectOrSchemnetOrSchemshieldOrSchemspliceOrSchemwireOrSchemhighwayOrSchemfunccondOrSchemnodeOrSchemassemblyOrArcOrCircleOrCommentOrCurveOrImageOrGfxgroupOrLineOrPolygonOrPolylineOrPropertiedtextOrRectangleOrWidtharcOrStyleframeOrUnconstrainedstyleframeOrPrintregiongroup == null) {
            logicwiretabledataOrLogicdevicetabledataOrLogicconnectortabledataOrLogicassemblytabledataOrLogicrevisiontabledataOrLogicmulticoretabledataOrLogicoverbraidtabledataOrLogicbomtabledataOrLogicdiagramtabledataOrDynamictabledataOrPlugintabledataOrTableOrTablegroupOrPropertiedgraphicOrAttributetextOrProptextOrDiagramtextOrCompositetextOrSchemchainOrSchemconnectorOrSchemdeviceOrSchemdeviceconnectorOrSchemgrounddeviceOrSchemindicatorOrScheminterconnectOrSchemnetOrSchemshieldOrSchemspliceOrSchemwireOrSchemhighwayOrSchemfunccondOrSchemnodeOrSchemassemblyOrArcOrCircleOrCommentOrCurveOrImageOrGfxgroupOrLineOrPolygonOrPolylineOrPropertiedtextOrRectangleOrWidtharcOrStyleframeOrUnconstrainedstyleframeOrPrintregiongroup = new ArrayList<Object>();
        }
        return this.logicwiretabledataOrLogicdevicetabledataOrLogicconnectortabledataOrLogicassemblytabledataOrLogicrevisiontabledataOrLogicmulticoretabledataOrLogicoverbraidtabledataOrLogicbomtabledataOrLogicdiagramtabledataOrDynamictabledataOrPlugintabledataOrTableOrTablegroupOrPropertiedgraphicOrAttributetextOrProptextOrDiagramtextOrCompositetextOrSchemchainOrSchemconnectorOrSchemdeviceOrSchemdeviceconnectorOrSchemgrounddeviceOrSchemindicatorOrScheminterconnectOrSchemnetOrSchemshieldOrSchemspliceOrSchemwireOrSchemhighwayOrSchemfunccondOrSchemnodeOrSchemassemblyOrArcOrCircleOrCommentOrCurveOrImageOrGfxgroupOrLineOrPolygonOrPolylineOrPropertiedtextOrRectangleOrWidtharcOrStyleframeOrUnconstrainedstyleframeOrPrintregiongroup;
    }

}
